%% LaTeX2e file `riscv-jop.bib'
%% generated by the `filecontents' environment
%% from source `riscv-jop' on 2020/12/01.
%%
%-------------------------------------------------------------------------------
@misc{gu20ropriscv,
    title={Return-Oriented Programming in RISC-V},
    author={Gu, Garrett and Shacham, Hovav},
    year={2020},
    eprint={2007.14995},
    archivePrefix={arXiv},
    primaryClass={cs.CR},
}
@inproceedings{bletsch11jopx86,
    author = {Bletsch, Tyler and Jiang, Xuxian and Freeh, Vince W. and Liang, Zhenkai},
    title = {Jump-Oriented Programming: A New Class of Code-Reuse Attack},
    year = {2011},
    isbn = {9781450305648},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/1966913.1966919},
    doi = {10.1145/1966913.1966919},
    abstract = {Return-oriented programming is an effective code-reuse attack in which short code sequences ending in a ret instruction are found within existing binaries and executed in arbitrary order by taking control of the stack. This allows for Turing-complete behavior in the target program without the need for injecting attack code, thus significantly negating current code injection defense efforts (e.g., W⊕X). On the other hand, its inherent characteristics, such as the reliance on the stack and the consecutive execution of return-oriented gadgets, have prompted a variety of defenses to detect or prevent it from happening.In this paper, we introduce a new class of code-reuse attack, called jump-oriented programming. This new attack eliminates the reliance on the stack and ret instructions (including ret-like instructions such as pop+jmp) seen in return-oriented programming without sacrificing expressive power. This attack still builds and chains functional gadgets, each performing certain primitive operations, except these gadgets end in an indirect branch rather than ret. Without the convenience of using ret to unify them, the attack relies on a dispatcher gadget to dispatch and execute the functional gadgets. We have successfully identified the availability of these jump-oriented gadgets in the GNU libc library. Our experience with an example shellcode attack demonstrates the practicality and effectiveness of this technique.},
    booktitle = {Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security},
    pages = {30–40},
    numpages = {11},
    location = {Hong Kong, China},
    series = {ASIACCS '11}
}
@inproceedings{shacham07ropx86,
    author = {Shacham, Hovav},
    title = {The Geometry of Innocent Flesh on the Bone: Return-into-Libc without Function Calls (on the X86)},
    year = {2007},
    isbn = {9781595937032},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/1315245.1315313},
    doi = {10.1145/1315245.1315313},
    abstract = {We present new techniques that allow a return-into-libc attack to be mounted on x86 executables that calls no functions at all. Our attack combines a large number of short instruction sequences to build gadgets that allow arbitrary computation. We show how to discover such instruction sequences by means of static analysis. We make use, in an essential way, of the properties of the x86 instruction set.},
    booktitle = {Proceedings of the 14th ACM Conference on Computer and Communications Security},
    pages = {552–561},
    numpages = {10},
    keywords = {return-into-libc, instruction set, turing completeness},
    location = {Alexandria, Virginia, USA},
    series = {CCS '07}
}
@inproceedings{patterson98risc,
    title={RISC I: A reduced instruction set VLSI computer},
    author={Patterson, David A and Sequin, Carlo H},
    booktitle={25 years of the international symposia on Computer architecture (selected papers)},
    pages={216--230},
    year={1998}
}

